
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}

http {
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
	map $http_origin $allow_origin {
    ~^https?://(.*\.)?localhost(:\d+)?$ $http_origin;
    # NGINX won't set empty string headers, so if no match, header is unset.
    default "";
	}
    
    server {
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;
        proxy_connect_timeout 600s;
        
        location / {
            proxy_pass http://frontend:3000;
        }

        location /api {
            proxy_pass http://backend:5000/;
            proxy_cookie_domain localhost localhost;
            proxy_cookie_domain 10.0.0.233 localhost;
						add_header 'Access-Control-Allow-Origin' $allow_origin always;
						add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            # required to be able to read Authorization header in frontend
            add_header 'Access-Control-Expose-Headers' 'Authorization' always;
        }

        location /sockjs-node {
            proxy_pass http://frontend:3000/sockjs-node;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_read_timeout 600s;
            proxy_send_timeout 600s;
        }
    }
}
